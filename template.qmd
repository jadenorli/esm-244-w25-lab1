---
title: "ESM 244 Lab One"
format:
  html:
    code-fold: true
    toc: true
execute:
  eval: false
---

## Load in Data

You may need to install these packages

```{r}
#load the necessary libraries
library(tidyverse)
library(sf)
library(here)
library(tmap)

```


What do we need to change to get the data to load in the following chunk?

```{r}
#read in the necessary data 
sfo_trees_df <- read_csv(here("data","sfo_trees", "sfo_trees.csv")) %>%
  janitor::clean_names() #clean the names

```


## Part 1: Data Exploration

Look at `sfo_trees_df` dataframe. How many observations are there? What does the data include? Use the console to explore the data.

```{r}
#find the number of distinct tree ID's to determine the number of observations 
sum(n_distinct(sfo_trees_df$tree_id))

```


What are some interesting questions you could ask about the data?

Write them below:

How does species richness change with latitude?
Is there a correlation between legal status and species?
How many counts of each observation by legal status? Focus on the highest tree counts?

```{r}
#find the number of observations for each legal status (the number of trees in each category) and only keep the top five observations
sfo_top_counts <- sfo_trees_df %>%
  group_by(legal_status) %>%
  summarise(tree_count = n()) %>%
  slice_max(tree_count, n = 5) #only consider the 5 categories with the most observations 

```



```{r}
#create a bar graph to visualize the top five categories 
ggplot(sfo_top_counts) +
  geom_col(aes(x = fct_reorder(legal_status, tree_count), y = tree_count)) +
  labs(title = "Number of Individual Trees Classified by Legal Status",
                x = "Legal Status",
                y = "Tree Count") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


### Example 2

Describe what this piece of code does. Feel free to run it to help you understand

```{r}
#filter the sfo_trees_df to just contain Permitted Sites that are either taken care of by the as MTA or DPW
permitted_mta_dpw <- sfo_trees_df %>%
  filter(legal_status == "Permitted Site" & caretaker %in% c("MTA","DPW"))

```


### Example 3

Our boss tasked us with identifying oak and pine trees in SF based on legal status, location, and planting date. Wrangle the data to plot the locations (without sf borders for now) and then summarize the number of oak and pines by legal status in a separate df. Call the wrangled dataframe `oak_pine_df` and the summary `oak_pine_count`

Write pseudocode on how you would solve it

- get rid of all columns with unnecessary information
- filter out plants that are not pine and oak
- summarize the counts of the oaks and pines 

```{r}
#create the new df
oak_pine_df <- sfo_trees_df %>%
  filter(str_detect(species, "oak") | (str_detect(species, "pine"))) %>% #choose species that have oak or pine in the name
  select(species, legal_status, plant_date, latitude, longitude) %>% #select these columns
  mutate(type = ifelse(str_detect(species, "oak"), "oak", "pine")) #if the name contains oak create a column with the type saved as oak, if the name doesn't contain oak, name the type pine 

```


Summary stats

```{r}
#create a summary of the number of oak and pine indiviudals for each legal status 
oak_pine_count <- oak_pine_df %>% 
  group_by(legal_status,type) %>% 
  summarize(count = n())

```



Plot the locations of the trees as a scatterplot

```{r}
#create a ggplot of the oaks and pines through space 
ggplot(oak_pine_df) +
  geom_point(aes(x = longitude, y = latitude, col = type))

```


### Example 4

Why have a list of native trees in the data folder.

```{r}
#load in the csv with the native trees
ca_native_df<-read_csv(here("data","sfo_trees", "ca_native_spp.csv"))

```


## Part 2: Analysis and maps

We want to see if there was a difference in planting years between a native oak *Quercus agrifolia* and a native pine *Pinus radiata*. Wrangle the data and use an appropriate statistical test to see if there is a difference.


**New Function!**

How to extract the year from the plant data column when it looks like "2022-11-16"? The package `lubridate` and function `year()` pulls out year information from date formats.  See the example code below.

```{r}
lubridate::year("2022-11-16")
```

```{r}
#create a dataframe with the native species
sfo_trees_native <- sfo_trees_df %>%
  separate(species, into = c("scientific", "common"), sep = " :: ") %>% #separate out the scientific name and the common name
  select("scientific", "common", "plant_date", "legal_status", "longitude", "latitude") %>%
  mutate(ca_native = (scientific %in% ca_native_df$scientific_name))

```


```{r}
#now subset the data to only include the pines and oaks 
oak_pine_year_df <- sfo_trees_native %>%
  filter(scientific %in% c("Quercus agrifolia", "Pinus radiata")) %>%
  mutate(year = lubridate::year(plant_date))

```

Welch Two Sample t-test

```{r}
#run a t-test for the mean year
t.test(year ~ scientific, data = oak_pine_year_df)

```


Use the graph below to support your results. What does each line of code do in the ggplot?

```{r}
ggplot(oak_pine_year_df)+
  geom_histogram(aes(x=year),bins = 10)+
  facet_wrap(~scientific,ncol=1)+
  theme_minimal()
```


Plot the selected species as points with a different colors for each year and a different shape for each species

### Spatial map:

Follow along as the instructor walks through each code chunk. In week 7 we'll cover spatial manipulation in R in far more detail. This is just to show a pretty map for all the work we did.

**Step 1**

Set the coordinate reference system

```{r}
oak_pine_sf<-oak_pine_year_df |> 
  drop_na(longitude,latitude) |> 
  st_as_sf(coords=c("longitude","latitude"))

st_crs(oak_pine_sf)<-4326

ggplot(data=oak_pine_sf)+
  geom_sf(aes(color=scientific))+
  theme_minimal()
```


**Step 2**

Read in the shape file for San Fransico.

```{r}
sfo_map <- read_sf(here("data", "sfo_map", "tl_2017_06075_roads.shp"))

#What do you think this does?
st_transform(sfo_map, 4326)
```

Plot it to see the outlines of streets

```{r}
ggplot(data = sfo_map) +
  geom_sf()
```


We have all the ingredients. How would you plot these two together to see the trees locations in the city?

```{r}
ggplot() +
  geom_sf(data = sfo_map,
          size = 0.1,
          color = "darkgray") +
  geom_sf(data = oak_pine_sf, 
          aes(color = scientific),
          size = 0.5) +
  theme_void() +
  labs(title = "Oaks and pines in San Francisco")
```


### Interactive Maps!

We can make maps interactive in R using the tmaps package (another reason why html docs are so cool).

There are other packages that do similar things. Consider for your shiny apps!

```{r}
tmap_mode("view")

tm_shape(oak_pine_sf)+
  tm_dots(col='scientific')
```



WE ARE NOT DONE UNTIL WE SAVE, STAGE, COMMIT, AND PUSH!!!!!!
